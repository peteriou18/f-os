Welcome to the f-os readme!

Minimal is minimal wordset of forth system. This is system baremetal, loading from MBR. It working in flat PM 32 mode.  Filesystem very simpe based on 8192 bytes blocks, numbering 1 - 2^32-1. Block 0 mbr and kernel, further loading going from source code located in blocks 1 - 2^32-1.

Kernel calls 1 LOAD word, where (in 1st block) present other LOADs.

In this version of Forth numbers enters with spcecial words 0x (zero exs) 0xd (zero exs di) for only hexadecimal unsigned numbers single (32 bits) and double (64 bits) precision. 


FORTH32  - base vocabulary.
BADWORD - vector word with zero Link Field. End of search on vocabulary in wich BADWORD is. By default poits to ABORT.
EXIT - exit. End of interpretation. 
       This two words present in any vocabulary.
Push - push data on stack.
Pop - pop data from stack.
ABORT - message wrong word. Called by BADWORD.
HERE - top of codofile. Above HERE  free memory.

INTERPRET - interpretator.
PARSE - take word form input stream and place it to HERE as zero by 4 aligned string with counter.
CONTEXT - variable where lays vocid of searching vocabulary.
CURRENT - variable where lays vocid of appending vocabulary.
ENCLOSE - transfer string form addra to addrb, setting counter and zero aligning it. If at addra empty place to addrb  EXIT word.
@  - fetch. 
!  - store.
SFIND - finds word from HERE in CONTEXT from stack and put xt of this word to stack.
EXECUTE - execute xt from top of stack.
BLOCK - variable-defined word,  puts on stack address of block structure.
variable# - constant. Points to code for VARIABLE-defined words.
constant# - constant. Points to code for CONSTANT-defined words.
interpret# - constant. Point to code for high-level aka colon-defined words.
>IN    - variable. Counts symbols in input stream.
LOAD - load and interpret block.
BUFFER - constant. Points to block buffer.
rdblock - read block from bootable disk.
TYPEZ - type ASCIIZ string.
0xd - response next word like hexadecimal double ( 64 bits) unsigned number and put it onto stack.
0x - the same like previuos but for 32 bits numbers.
number - take word form input stream and place it to HERE as 30h left-aligned string.
, "comma" - compile value from top of stack HERE.
HEADER - create header - name filed and link field. 
N>LINK - converts NFA to LFA.
LATEST - put to stack latest NFA from CURRENT list.
' "tick" - enter word and put it xt to stack.
CELL+ - add cell size to top of stack element.
ALIGN - Align HERE to 4. Useful after low-lvel definitions.
UNLINK - unlink vocabulary. Make it standalone.
LINK - Concatenate two vocabularies.

ASSEMBLER - vocabulary for opcodes by default based on FORTH32
opcode - define opcode name.

Block1 (under construction)
Loads and tests

Block2 (under construction)
1, 2 bytes opcodes.

Block3
3, 4, 5 bytes opcodes.

Block4
CELL- hex_dot_value sixes efes sevens zeroes hexstr inverse_hexstr (hex_dot)
2HEX. HEX. - SWAP- + TIMER@ lit# 1+ 1- 2* 2/ C@ C! ALLOT SLIT DUP >R R> R@ SWAP!

Block5
COMPILE BRANCH ?OF ?BRANCH AND = <> < stop break exec_point WITNIN rWITHIN SP@
SWAP OVER NEGATE CELLs strcopy

Block 6 (under construction) 
lit# set_cursor CONSTANT 0 1 -1 BL ) QUOTE VARIABLE LIT, ;Word Word: 0x, ', WORD .( PAD Word+ S"
," make_badword make_exit VOCABULARY NOOP compiler (
BEGIN AGAIN UNTIL IF THEN ELSE ENDOF OF IMMEDIATES ;WORD WORD: [ ] ."
.(( (( Begin Until Again If Then Else hex, Case Of EndOf EndCase Do Loop


forward> - place for jump from 
>forward - place for jump to
*Note: How to use - forward> forward> ... forward> ... >forward ... >forward >forward is equvalent to 
       jmp(cc) label1 jmp(cc) label2 ... jmp(cc) labeln ... labeln: ... label2: label1. I.e. stack of 
       labels and jumps to it.

backward<
<backward


Block 7 
key key_flags idtr interrupts forward> >forward backward< <backward
 make_interrupt_gate

Block 8
Interrupts setup

Block 9 
chr span's VECTOR  upper? caps_shift only_shift (span1) (span2)  span: eng 

Block A
editor 

