В основе minimal f-os лежит идея многослойности.
Слой 0 - кернель. 
Слова, определенные в кернеле - тот необходимый минимум, с которого можно развивать систему.

Слой 0.5 - ассемблер. 
Очень простой ассемблер, скорее часть кода, ставящая в соответствие мнемоники опкодам.

Слой 1 - слой низкоуровневых определений.
HEADER nnn    HERE  CELL+ ,
Слово HEADER задает заголовок определения - поле имени и поле связи.
Словами HERE  CELL+ , формируется поле кода - адрес следующей ячейчки - поля параметров.
Далее идет собственно код, заполнение поля параметров. 
Важно:
1) Сделать список ASSEMBLER контекстным. По-умолчанию он слинкован со списком FORTH32.
2) После конца низкоуровневого определения обязательно использовать слово ALIGN. 

Слой 2 - высокоуровневые определения.
На этом уровне, в свою очередь, есть несколько стадий развития. Из-за того, что режим компиляции 
в системе изначально отсутствует, компиляция производится в "ручном" режиме. И лишь затем вводится
"автоматический" режим.

 HEADER bbb   interpret# ,  ' xxx , ' xxx , ' xxx , ' EXIT , 
 
Слово interpret# кладет на стек адрес подпрограммы адресного интерпретатора, "запятая" компилирует его, 
формируя таким образом поле кода словарной статьи. Далее "апостроф" кладет на стек xt слова, компилируемого 
в определение и "запятая" компилирует его. В конце определения нужно скомпилировать EXIT.
 
Немного сократить запись можно введением нескольких слов.
Word: - создает заголовок статьи, включая поле кода. 
;Word - парное слово или закрывающий тэг, которое просто компилирует EXIT.
', - комбинация двух слов, чуть уменьшающая размер текста.

Word: bbb   ', xxx ', xxx ', xxx ;Word

Автоматизация компиляции.

Открывающее слово-тэг WORD: закрывающее слово-тэг ;WORD

 
