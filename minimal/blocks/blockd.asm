; block d


db " FORTH32 CURRENT ! ASSEMBLER CONTEXT ! "
db " ASSEMBLER FORTH32 LINK "

db " HEADER get_realtime HERE CELL+ , "
db " mov_edx,# 0x 70 ,   "
db " mov_eax,# 0x 4 ,    "
db " out_dx,al "
db " inc_edx     "
db " in_al,dx   "
db " mov_cl,al  "
db " shl_ecx,# 0x 8 B, "
db " dec_edx   "
db " mov_eax,# 0x 2 ,    "
db " out_dx,al "
db " inc_edx     "
db " in_al,dx   "
db " mov_cl,al  "
db " shl_ecx,# 0x 8 B, "
db " dec_edx   "
db " mov_eax,# 0x 0 ,    "
db " out_dx,al "
db " inc_edx     "
db " in_al,dx   "
db " mov_cl,al  "
db " mov_eax,ecx   "
db " mov_edx,# ' Push @ , call_edx "
db " ret "
db " ALIGN "


db " HERE HERE HERE "
;db " xor_ecx,ecx    "
db " mov_cl,al  "
db " mov_ah,# 0x 1F B, "
db " mov_ch,ah   "
db " and_al,# 0x F B, "
db " or_al,#  0x 30 B,  "

db " and_cl,# 0x F0 B, "
db " shr_cl,# 0x 4 B,   "
db " or_cl,# 0x 30 B, "
db " shl_eax,# 0x 10 B, "
db " or_eax,ecx   "
db " mov_[edi],eax "
;db " xor_eax,eax   "
db " ret "
db " ALIGN "

db " HEADER realtime HERE CELL+ , "
db " mov_edx,# ' Pop @ , call_edx "  ;address
db " mov_edi,eax "
db " mov_edx,# 0x 70 ,   "
db " mov_eax,# 0x 4 ,    "
db " out_dx,al "
db " inc_edx     "
db " in_al,dx   "
db " mov_edx,# , call_edx "

db " add_edi,b# 0x 4 B,   "
db " mov_edx,# 0x 70 ,   "
db " mov_eax,# 0x 2 ,    "
db " out_dx,al "
db " inc_edx     "
db " in_al,dx   "
db " mov_edx,# ,  call_edx "

db " add_edi,b# 0x 4 B,   "
db " mov_edx,# 0x 70 ,   "
db " mov_eax,# 0x 0 ,    "
db " out_dx,al "
db " inc_edx     "
db " in_al,dx   "
db " mov_edx,# , call_edx "
;db " mov_edx,# ' Push @ , call_edx "
db " ret "
db " ALIGN "

db " FORTH32 CURRENT ! FORTH32 CONTEXT ! "

;db " ' on_timer @ 0x 20 make_interrupt_gate "
;db " ' on_apic_timer @ 0x 30 make_interrupt_gate "
;db " init_apic_timer init_PIT 0 start_timer "
;db " WORD: apic_calibrate  0   0 hex, 20   Do apic_ticks @ DUP HEX. + Loop  HEX.  ;WORD "
;db " apic_calibrate "

;db " WORD: beep   [ ' stop_beep @ 0x 30 make_interrupt_gate ]   "
;db "                 hex, 344 set_tone hex, FFFFFFF (beep)   ;WORD "
db 0
alignhe20
