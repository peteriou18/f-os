.Слово, выдающее классы устройств на шине писиай.
Принимает со стека значение и выдает его расшифровку. 

Класс писиай утсройства зашифрован в старших 2-х байтах.

Такс. этот кейс занимает 3 блока. Либо сокращать кейс, вынося тексты в отдельные слова, либо делать загрузку 
сразу нескольких блоков. Второе, конечно, предочтительнее.
THRU ( first-block last_block -- ) 
В итоге сделана стрелочка --> 


Сташий байт
  Младший байт

: pci-classes   
  
CASE >R 
 R@  0x, 00 = OF   ,"	Unclassified device	" 
    CASE >R
         R@ 0x, 00 = OF 	," Non-VGA unclassified device	" ENDOF
         R@ 0x, 01 = OF  ,"	VGA compatible unclassified device " ENDOF
    ENDCASE R> DROP ENDOF
  
 R@ 0x, 01 = OF  ,"	Mass storage controller	" 
    CASE >R
         R@ 0x, 00 =  OF ,"	SCSI storage controller "       	ENDOF
         R@ 0x, 01 =	OF ," IDE interface "                 	ENDOF
         R@ 0x, 02 =  OF ," Floppy disk controller "        	ENDOF
         R@ 0x, 03 =  OF ,"	IPI bus controller "            	ENDOF
         R@ 0x, 04 =  OF ," RAID bus controller "           	ENDOF
         R@ 0x, 05 =  OF ," ATA controller "                	ENDOF
         R@ 0x, 06 =  OF ," SATA controller "               	ENDOF
         R@ 0x, 07 =  OF ," Serial Attached SCSI controller "	ENDOF
         R@ 0x, 08 =  OF ," Non-Volatile memory controller "	ENDOF
         R@ 0x, 80 =  OF ," Mass storage controller "         ENDOF
    ENDCASE R> DROP ENDOF
  
 R@ 0x, 02 = OF ,"	Network controller "
    CASE >R
        R@ 0x, 00 = OF ,"	Ethernet controller	" ENDOF
        R@ 0x, 01 = OF ,"	Token ring network controller	" ENDOF
        R@ 0x, 02 = OF ,"	FDDI network controller	" ENDOF
        R@ 0x, 03 = OF ,"	ATM network controller " ENDOF	
        R@ 0x, 04 = OF ,"	ISDN controller	" ENDOF
        R@ 0x, 05 = OF ,"	WorldFip controller	" ENDOF
        R@ 0x, 06 = OF ,"	PICMG controller	" ENDOF
        R@ 0x, 07 = OF ," Unknown " ENDOF		
        R@ 0x, 80 = OF ," Network controller " ENDOF
    ENDCASE R> DROP ENDOF
  
 R@ 0x, 03 = OF ,"	Display controller "  	
    CASE >R
        R@ 0x, 00 = OF ,"	VGA compatible controller	" ENDOF
        R@ 0x, 01 = OF ,"	XGA compatible controller	" ENDOF
        R@ 0x, 02 = OF ," 3D controller	"             ENDOF
        R@ 0x, 80 = OF ," Display controller "        ENDOF
     ENDCASE R> DROP ENDOF   
  
 R@ 0x, 04 = OF ,"	Multimedia controller	"
    CASE >R
        R@ 0x, 00 = OF ,"	Multimedia video controller " ENDOF	
        R@ 0x, 01 = OF ," Multimedia audio controller " ENDOF	
        R@ 0x, 02 = OF ,"	Computer telephony device	 " ENDOF
        R@ 0x, 03 = OF ,"	Audio device " ENDOF	
        R@ 0x, 80 = OF ,"	Multimedia controller" ENDOF
     ENDCASE R> DROP ENDOF

 R@ 0x, 05 = OF ,"	Memory controller	"
     CASE >R
        R@ 0x, 00 = OF ,"	RAM memory	" ENDOF
        R@ 0x, 01 = OF ," FLASH memory	" ENDOF 
        R@ 0x, 80 = OF ," Memory controller " ENDOF
     ENDCASE R> DROP ENDOF
  
 R@ 0x, 06 = OF ,"	Bridge	"
     CASE >R
        R@ 0x, 00 = OF ,"	Host bridge	" ENDOF
        R@ 0x, 01 = OF ," ISA bridge " ENDOF	
        R@ 0x, 02 = OF ," EISA bridge	" ENDOF
        R@ 0x, 03 = OF ," MicroChannel bridge	" ENDOF
        R@ 0x, 04 = OF ,"	PCI bridge " ENDOF	
        R@ 0x, 05 = OF ,"	PCMCIA bridge	" ENDOF
        R@ 0x, 06 = OF ,"	NuBus bridge " ENDOF	
        R@ 0x, 07 = OF ,"	CardBus bridge	" ENDOF
        R@ 0x, 08 = OF ,"	RACEway bridge " ENDOF
        R@ 0x, 09 = OF ,"	Semi-transparent PCI-to-PCI bridge " ENDOF	
        R@ 0x, 0a = OF ,"	InfiniBand to PCI host bridge	" ENDOF
        R@ 0x, 80 = OF ,"	Bridge " ENDOF
      ENDCASE R> DROP ENDOF
  
 R@ 0x, 07 = OF ,"	Communication controller "
      CASE >R
         R@ 0x, 00 = OF ,"	Serial controller	" ENDOF
         R@ 0x, 01 = OF ," Parallel controller	" ENDOF
         R@ 0x, 02 = OF ,"	Multiport serial controller	" ENDOF
         R@ 0x, 03 = OF ,"	Modem	" ENDOF
         R@ 0x, 04 = OF ,"	GPIB controller	" ENDOF
         R@ 0x, 05 = OF ," 	Smard Card controller	" ENDOF
         R@ 0x, 80 = OF ,"	Communication controller " ENDOF
      ENDCASE R> DROP ENDOF
   
 R@ 0x, 08 = OF ,"	Generic system peripheral	"
      CASE >R
        R@ 0x, 00 = OF ,"	PIC	" ENDOF
        R@ 0x, 01 = OF ," DMA controller	" ENDOF
        R@ 0x, 02 = OF ," Timer	" ENDOF
        R@ 0x, 03 = OF ,"	RTC	" ENDOF
        R@ 0x, 04 = OF ,"	PCI Hot-plug controller	" ENDOF
        R@ 0x, 05 = OF ,"	SD Host controller " ENDOF	
        R@ 0x, 06 = OF ,"	IOMMU	" ENDOF
        R@ 0x, 80 = OF ,"	System peripheral " ENDOF
      ENDCASE R> DROP ENDOF
    
 R@ 0x, 09 = OF ,"	Input device controller	"
      CASE >R
        R@ 0x, 00 = OF ,"	Keyboard controller	" ENDOF
        R@ 0x, 01 = OF ,"	Digitizer Pen	" ENDOF
        R@ 0x, 02	= OF ," Mouse controller " ENDOF	
        R@ 0x, 03 = OF ,"	Scanner controller	" ENDOF
        R@ 0x, 04 = OF ,"	Gameport controller	" ENDOF
        R@ 0x, 80 = OF ,"	Input device controller " ENDOF
    ENDCASE R> DROP ENDOF
    
 R@ 0x, 0a = OF ,"	Docking station	"
      CASE >R
        R@ 0x, 00 = OF ,"	Generic Docking Station	" ENDOF
        R@ 0x, 80 = OF ,"	Docking Station " ENDOF
    ENDCASE R> DROP ENDOF
    
 R@ 0x, 0b = OF ,"	Processor	"
      CASE >R
        R@ 0x, 00 = OF ,"	386 "	ENDOF
        R@ 0x, 01 = OF ,"	486 "	ENDOF
        R@ 0x, 02 = OF ,"	Pentium " ENDOF	
        R@ 0x, 03	= OF ," Unknown " ENDOF	
        R@ 0x, 04	= OF ," Unknown " ENDOF	
        R@ 0x, 10 = OF ,"	Alpha	" ENDOF
        R@ 0x, 20 = OF ,"	Power PC	" ENDOF
        R@ 0x, 30 = OF ,"	MIPS " ENDOF	
        R@ 0x, 40 = OF ," Co-processor " ENDOF
   ENDCASE R> DROP ENDOF
   
 R@ 0x, 0c = OF ,"	Serial bus controller	"
      CASE >R
        R@ 0x, 00	= OF ," FireWire (IEEE 1394)	" ENDOF
        R@ 0x, 01 = OF ,"	ACCESS Bus	" ENDOF
        R@ 0x, 02 = OF ,"	SSA	" ENDOF
        R@ 0x, 03	= OF ," USB controller " ENDOF	
        R@ 0x, 04	= OF ," Fibre Channel " ENDOF	
        R@ 0x, 05 = OF ,"	SMBus	" ENDOF
        R@ 0x, 06 = OF ,"	InfiniBand " ENDOF	
        R@ 0x, 07 = OF ,"	IPMI SMIC interface " ENDOF	
        R@ 0x, 08 = OF ,"	SERCOS interface " ENDOF	
        R@ 0x, 09 = OF ,"	CANBUS " ENDOF
     ENDCASE R> DROP ENDOF

 R@ 0x, 0d = OF ,"	Wireless controller	"
      CASE >R
         R@ 0x, 00 = OF ,"	IRDA controller	" ENDOF
         R@ 0x, 01 = OF ,"	Consumer IR controller " ENDOF	
         R@ 0x, 10 = OF ,"	RF controller	" ENDOF
         R@ 0x, 11 = OF ,"	Bluetooth	" ENDOF
         R@ 0x, 12 = OF ,"	Broadband	" ENDOF
         R@ 0x, 20 = OF ,"	802.1a controller	" ENDOF
         R@ 0x, 21 = OF ,"	802.1b controller	" ENDOF
         R@ 0x, 80 = OF ,"	Wireless controller " ENDOF
      ENDCASE R> DROP ENDOF
  
  
 R@ 0x, 0e = OF ,"	Intelligent controller	"
      CASE >R
         R@ 0x, 00 = OF ,"	I2O " ENDOF
      ENDCASE R> DROP ENDOF
 
 R@ 0x, 0f = OF ,"	Satellite communications controller	"
      CASE >R
          R@ 0x, 01	= OF ," Satellite TV controller	" ENDOF
          R@ 0x, 02 = OF ,"	Satellite audio communication controller " ENDOF	
          R@ 0x, 03	= OF ," Satellite voice communication controller " ENDOF	
          R@ 0x, 04 = OF ,"	Satellite data communication controller " ENDOF
      ENDCASE R> DROP ENDOF

 R@ 0x, 10 = OF ,"	Encryption controller	" 
      CASE >R
         R@ 0x, 00 = OF ,"	Network and computing encryption device	" ENDOF
         R@ 0x, 10 = OF ,"	Entertainment encryption device	" ENDOF
         R@ 0x, 80 = OF ,"	Encryption controller " ENDOF
      ENDCASE R> DROP ENDOF

 R@ 0x, 11 = OF ," Signal processing controller "
      CASE >R
        R@ 0x, 00 = OF ,"	DPIO module	" ENDOF
        R@ 0x, 01 = OF ,"	Performance counters	" ENDOF
        R@ 0x, 10	= OF ," Communication synchronizer	" ENDOF
        R@ 0x, 20 = OF ,"	Signal processing management	" ENDOF
        R@ 0x, 80 = OF ,"	Signal processing controller " ENDOF
  ENDCASE R> DROP ENDOF
  
 R@ 0x, ff = OF ,"	Unassigned class "  ENDOF
 ENDCASE R> DROP ;

Значит надо переделать вывод в формат xx. xx.. 
Стоп. Надо иметь переключаемык контексты, а их пока нет.

---------

: pci. @@1 @ HEX. SPACE @@2 @ HEX. SPACE @@3 @ HEX. CR ; ( не используется )

: pcia @@1 @ HEXt ," " S>># @@2 @ HEXt ," " S>># @@3 @ HEXt  @@3 @ pci-split-classes pci-classes >>S#  ," | " S>># ;
: pci_get @@1 @ pci0 @@2 ! @@2 @ 0x, ffffffff = IF @@1 @ 0x, 8 + pci0 @@3 ! pcia ELSE 1 DROP THEN ;
: ttype BEGIN DUP 0 TYPE 0x, 100 + KEY esc? 0 = UNTIL ;
: set-max-pci-addr 0x, fffff00 @@1 ! ;
: -pci-addr 0x, 100 @@1 -! @@1 @ ;
: header.. ," bus/dev " S>># ," dev/ven " S>># ," cls/rev " S>># ;
: pci-scan allocate_block header.. set-max-pci-addr
BEGIN pci_get -pci-addr 0 < UNTIL
," . --- " S>># BUFFER_1 +CELL @ BUFFER_1 @ WBLOCK allocate_block ; 

: pci-split-classes   ( n --- n n ) DUP 0x, 10000 / DROP 0x, 100 / ;  ( на входе двойное слово класс-ревижн, 
на  выходе два двойных слова  класс и подкласс )

