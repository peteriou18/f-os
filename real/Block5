.( Block 5. )                                                   

BIN: C!     call pop_ab mov_[ebx],al    ret                    
BIN: W!     call pop_ab mov_[ebx],ax   ret                    

BIN: bStatic@    call pop_code   movzx_eax,b[gs:eax]                    call push_code ret 
BIN: wStatic@    call pop_code  movzx_eax,w[gs:eax]                     call push_code ret   
BIN: dStatic@    call pop_code mov_eax,[gs:eax]                         call push_code ret   
BIN: bStatic! call pop_ab mov_[gs:ebx],al  ret                
BIN: wStatic! call pop_ab mov_[gs:ebx],ax  ret                
BIN: dStatic! call pop_ab mov_[gs:ebx],eax ret                

BIN: CMOVE  call pop_code mov_ecx,eax call pop_ab  code_top    @ label cm1 mov_dl,[ebx] mov_[eax],dl inc_ebx 
             inc_eax dec_ecx jne cm1 ret                        
             
BIN: 3DUP  call pop_code mov_ecx,eax call pop_code mov_ebx,eax  call pop_code mov_edx,eax mov_eax,ecx call push_code 
mov_eax,ebx call push_code mov_eax,edx call push_code           mov_eax,ecx call push_code mov_eax,ebx call push_code 
mov_eax,edx call push_code ret                              

BIN: LIT" mov_eax,[esp+2] add_eax, d# 4  call push_code   mov_ebx,[eax]  and_ebx, d# ff add_eax,ebx  dec_eax  
dec_eax mov_[esp+2],eax  ret                         

BIN: boot  int b# 19                                    

BIN: timestamp  rdtsc call push_code mov_eax,edx                                call push_code ret  
BIN: rd-msr  call pop_code mov_ecx,eax rdmsr call push_code                  mov_eax,edx call push_code ret  
BIN: cpuid_read call pop_code cpuid call push_code mov_eax,ebx    call push_code mov_eax,ecx call push_code mov_eax,edx 
call push_code ret                                          

BIN: pci0  call pop_code or_eax, d# 80000000 mov_dx, w# cf8 out_dx,eax  mov_dx, w# cfc  in_eax,dx call push_code ret 

BIN: nth+  call pop_ab sub_ebx,esi neg_ebx inc_ebx                         and_ebx, d# 3f add_[ebx*4+st_b],eax ret

BIN: return     call pop_code   lea_eax,[eax*2+eax]  lea_eax,[eax*2] add_esp,eax     ret                

BIN: 2-!   call  pop_code dec_d[eax] dec_d[eax]  ret         
BIN:  >    call pop_ab  cmp_ebx,eax setg_al  movsx_eax,al  call push_code  ret   
BIN: -!  call pop_ab  sub_[ebx],eax ret                      
BIN: CSP    lea_eax,[esi*4]  call push_code  ret              
BIN: right_shift_one     call pop_ab   code_top @ label rso          mov_cl,[ebx-1]  mov_[ebx],cl   dec_ebx   
cmp_eax,ebx          jne rso  ret                                             

BIN: rCMOVE   call pop_code mov_ebx,eax call pop_code                        mov_ecx,eax  call pop_code  
code_top @ label rcm1               mov_dl,[eax] mov_[ebx],dl inc_ebx inc_eax dec_ecx             jne rcm1 ret  

..      
